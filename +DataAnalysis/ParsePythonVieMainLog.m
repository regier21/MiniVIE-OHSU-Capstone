classdef ParsePythonVieMainLog < handle
    %PARSE_PYTHONVIE_MAIN_LOG Parses log files from PythonVIE
    %   This class file is dedicated to parsing a single log file type.  In
    %   this case, the log file is that generated by the main scenario
    %   withing the PythonVIE (i.e. run_www.py).
    %   This log files onctains the following message types:
    %
    %   Limb Controller (LC) Status (i.e. Heartbeats):
    %         nfu_state
    %         nfu_ms_per_CMDDOM
    %         nfu_ms_per_ACTUATEMPL
    %         lmc_software_state
    %         lc_software_state
    %         bus_voltage
    %       Note, order is NOT guarenteed as in example below
    %       2016-02-11 13:50:54,569 [NfuUdpRcv   ] [INFO ]  {'nfu_state': 'BOOTSTATE_COMMAND_REQ', 'nfu_ms_per_CMDDOM': 0.0, 'nfu_ms_per_ACTUATEMPL': 0.0, 'lmc_software_state': array([15, 15, 15,  4,  4, 15,  4], dtype=uint8), 'lc_software_state': 'SWSTATE_NOS_DIAGNOSTICS', 'bus_voltage': 18.824909}
    %       2016-02-11 12:21:57,506 [NfuUdpRcv   ] [INFO ]  {'nfu_ms_per_CMDDOM': 0.0, 'nfu_ms_per_ACTUATEMPL': 0.0, 'nfu_state': 'BOOTSTATE_COMMAND_REQ', 'lc_software_state': 'SWSTATE_NOS_DIAGNOSTICS', 'bus_voltage': 22.489866, 'lmc_software_state': array([15, 15, 15,  4,  4, 15,  4], dtype=uint8)}
    %
    %   MYO Status Data (Raw EMG is logged in a seperate file)
    %
    %
    % Revisions:
    %   Armiger 12/2/2017: Created
    properties
        filePath = ''
        fileName = ''
        numLines = 0
        textLines
        isRead  % Binary label of lines read and processed
        unreadLines
        userMsg
        heartbeatMsg
        meanVoltageMsg
        torqueMsg
        jointCmdMsg
        tempMsg
        dcellMsg
        firstDatetime
        lastDatetime
        elapsedTime
        maxVoltage
        minVoltage
        
    end
    methods
        function obj = ParsePythonVieMainLog()
        end
        function read_entire_file(obj,fullFilename)
            % Get filename and parse file
            
%             if nargin < 2
%                 % Raise file selection dialog if no files provided
%                 
%                 % [obj.fileName, obj.filePath] = uigetfile('*.log','Select one or more log files','Multiselect','off');
%                 
%                 obj.filePath = '';
%                 s = dir('*.log');
%                 obj.fileName = s(end).name;
%             else
                [p,f,e] = fileparts(fullFilename);
                obj.filePath = p;
                obj.fileName = [f e];
%             end
            
            %%%%%%%%%%%%%%%%%
            % read the file
            %%%%%%%%%%%%%%%%%
            filetext = fileread(fullfile(obj.filePath,obj.fileName));
            obj.textLines = strsplit(filetext, '\n');
            
            
        end
        function read_reduced_file(obj,fullFilename)
            %% test read time per log:
            
            [p,f,e] = fileparts(fullFilename);
            obj.filePath = p;
            obj.fileName = [f e];
            
            s = dir(fullFilename);
            
            byte_array = [];
            
            fileList = {s.name};
            
            for i = 1:length(fileList)
                fprintf('Reading %s (%.2f GB)...',fileList{i},sum([s(i).bytes])/1e9)
                %     obj(i) = DataAnalysis.ParsePythonVieMainLog(fileList{i});
                tic;
                fp = fopen(fullFilename,'r');
                
                CR = 10;
                read_inc = 1e6;
                chunk_sz = 1500;
                idx = chunk_sz:read_inc:s(i).bytes;
                
                byte_buf = zeros(length(idx),chunk_sz,'uint8');
                
                %     n = s(i).bytes / read_inc;
                for iPosition = 1:length(idx)
                    
                    fseek(fp,idx(iPosition) - chunk_sz + 1,'bof');
                    
                    % read a chunk of bytes
                    [b, count] = fread(fp,chunk_sz,'uint8');
                    byte_buf(iPosition,:) = b;
                    %         disp(char(b(id_1:id_2)'))
                    
                    %         disp(char(b'))
                    loc = ftell(fp);
                    %         if fseek(fp,loc+1e6,'bof') < 0
                    %             break
                    %         end
                    
                end
                
                fclose(fp);
                
                % Assemble full lines
                fprintf('[Parsing]')
                for iRow = 1:size(byte_buf,1)
                    row = byte_buf(iRow,:);
                    id_1 = find(row == CR,1);
                    id_2 = find(row == CR,1,'last');
                    try
                        byte_array = cat(2,byte_array,row(id_1:id_2));
                    catch
                        disp(row)
                        disp(id_1)
                        disp(id_2)
                    end
                end
                
                %     char(byte_array)
                
                
                %     filetext = fileread(fileList{i});
                t_elapsed = toc;
                fprintf('Done (%.2f s)\n',t_elapsed)
            end
            
            obj.textLines = strsplit(char(byte_array), '\n');

            
        end
        function read_file_group_reduced(obj,filePath)
            %% test read time per log:
            
            s = rdir(filePath);
            
            [p,f,e] = fileparts(fullFilename);
            obj.filePath = p;
            obj.fileName = [f e];
            
            s = dir(fullFilename);
            
            byte_array = [];
            
            fileList = {s.name};
            
            for i = 1:length(fileList)
                fprintf('Reading %s (%.2f GB)...',fileList{i},sum([s(i).bytes])/1e9)
                %     obj(i) = DataAnalysis.ParsePythonVieMainLog(fileList{i});
                tic;
                fp = fopen(fullFilename,'r');
                
                CR = 10;
                read_inc = 1e6;
                chunk_sz = 1500;
                idx = chunk_sz:read_inc:s(i).bytes;
                
                byte_buf = zeros(length(idx),chunk_sz,'uint8');
                
                %     n = s(i).bytes / read_inc;
                for iPosition = 1:length(idx)
                    
                    fseek(fp,idx(iPosition) - chunk_sz + 1,'bof');
                    
                    % read a chunk of bytes
                    [b, count] = fread(fp,chunk_sz,'uint8');
                    byte_buf(iPosition,:) = b;
                    %         disp(char(b(id_1:id_2)'))
                    
                    %         disp(char(b'))
                    loc = ftell(fp);
                    %         if fseek(fp,loc+1e6,'bof') < 0
                    %             break
                    %         end
                    
                end
                
                fclose(fp);
                
                % Assemble full lines
                fprintf('[Parsing]')
                for iRow = 1:size(byte_buf,1)
                    row = byte_buf(iRow,:);
                    id_1 = find(row == CR,1);
                    id_2 = find(row == CR,1,'last');
                    try
                        byte_array = cat(2,byte_array,row(id_1:id_2));
                    catch
                        disp(row)
                        disp(id_1)
                        disp(id_2)
                    end
                end
                
                %     char(byte_array)
                
                
                %     filetext = fileread(fileList{i});
                t_elapsed = toc;
                fprintf('Done (%.2f s)\n',t_elapsed)
            end
            
            obj.textLines = strsplit(char(byte_array), '\n');

            
        end
        function parse_text(obj)
            % Break file into lines
            obj.numLines = length(obj.textLines);
            obj.isRead = false(obj.numLines,1);
            fprintf('\nRead file: "%s" \t Found %d lines\n',obj.fileName,obj.numLines);
            
            %%%%%%%%%%%%%%%%%
            % Parse User Messages:
            %%%%%%%%%%%%%%%%%
            logMsgId = contains(obj.textLines,'User inserted log message');
            obj.isRead(logMsgId) = true;
            if any(logMsgId)
                logLines = obj.textLines(logMsgId)';
                
                obj.userMsg.msgTxt = extractAfter(logLines,'User inserted log message: ')';
                for i = 1:length(logLines)
                    % convert to date number
                    obj.userMsg.timeStamp{1,i} = datetime(logLines{i}(1:23),'InputFormat','yyyy-MM-dd HH:mm:ss,SSS');
                end
                disp(obj.userMsg)
            end
            
            %%%%%%%%%%%%%%%%%
            % Parse Moving Average Bus Voltage:
            %%%%%%%%%%%%%%%%%
            msgId = contains(obj.textLines,'Moving Average Bus Voltage:');
            obj.isRead(msgId ) = true;
            if any(msgId )
                msgLines = obj.textLines(msgId )';
                obj.meanVoltageMsg.time = datetime(extractBefore(msgLines,24),'InputFormat','yyyy-MM-dd HH:mm:ss,SSS');
                obj.meanVoltageMsg.value = str2double(extractAfter(msgLines,'Voltage: '));
            end
            
            %%%%%%%%%%%%%%%%%
            % Parse CPU Temp Messages:
            %%%%%%%%%%%%%%%%%
            tempMsgId = contains(obj.textLines,'CPU Temp: ');
            obj.isRead(tempMsgId) = true;
            if any(tempMsgId)
                tempLines = obj.textLines(tempMsgId)';
                obj.tempMsg.time = datetime(extractBefore(tempLines,24),'InputFormat','yyyy-MM-dd HH:mm:ss,SSS');
                obj.tempMsg.value = str2double(extractAfter(tempLines,'CPU Temp: '));
            end
            
            
            %%%%%%%%%%%%%%%%%
            % Parse DCELL Temp Messages:
            %%%%%%%%%%%%%%%%%
            dcellMsgId = contains(obj.textLines,'DCELL');
            obj.isRead(dcellMsgId) = true;
            if any(dcellMsgId)
                dcellLines = obj.textLines(dcellMsgId)';
                obj.dcellMsg.time = datetime(extractBefore(dcellLines,24),'InputFormat','yyyy-MM-dd HH:mm:ss,SSS');
                obj.dcellMsg.value = str2double(extractAfter(dcellLines,'DCELL: '));
            end
            
            %%%%%%%%%%%%%%%%%
            % Parse Joint Torque:
            %%%%%%%%%%%%%%%%%
            torqueMsgId = contains(obj.textLines,'Torque:');
            obj.isRead(torqueMsgId) = true;
            if any(torqueMsgId)
                torqueLines = obj.textLines(torqueMsgId)';
                obj.torqueMsg.time = datetime(extractBefore(torqueLines,24),'InputFormat','yyyy-MM-dd HH:mm:ss,SSS');
                obj.torqueMsg.value = cellfun(@str2num,extractAfter(torqueLines,'Torque: '),'UniformOutput',false);
            end
            
            %%%%%%%%%%%%%%%%%
            % Parse Joint Command:
            %%%%%%%%%%%%%%%%%
            jointCmdMsgId = contains(obj.textLines,'CmdAngles:');
            obj.isRead(jointCmdMsgId) = true;
            if any(jointCmdMsgId)
                jointCmdLines = obj.textLines(jointCmdMsgId)';
                obj.jointCmdMsg.time = datetime(extractBefore(jointCmdLines,24),'InputFormat','yyyy-MM-dd HH:mm:ss,SSS');
                obj.jointCmdMsg.value = cellfun(@str2num,extractAfter(jointCmdLines,'CmdAngles: '),'UniformOutput',false);
            end
            
            %%%%%%%%%%%%%%%%%%
            % Parse Hearbeat lines
            % example:
            % {'2016-02-11 13:50:54,569 [NfuUdpRcv   ] [INFO ]  {'nfu_state': 'BOOTSTATE_COMMAND_REQ', 'nfu_ms_per_CMDDOM': 0.0, 'nfu_ms_per_ACTUATEMPL': 0.0, 'lmc_software_state': array([15, 15, 15,  4,  4, 15,  4], dtype=uint8), 'lc_software_state': 'SWSTATE_NOS_DIAGNOSTICS', 'bus_voltage': 18.824909}'}
            % {'2016-02-11 12:21:57,506 [NfuUdpRcv   ] [INFO ]  {'nfu_ms_per_CMDDOM': 0.0, 'nfu_ms_per_ACTUATEMPL': 0.0, 'nfu_state': 'BOOTSTATE_COMMAND_REQ', 'lc_software_state': 'SWSTATE_NOS_DIAGNOSTICS', 'bus_voltage': 22.489866, 'lmc_software_state': array([15, 15, 15,  4,  4, 15,  4], dtype=uint8)}'}
            
            %%%%%%%%%%%%%%%%%%
            
            % Find NFU Heartbeat
            statusId = contains(obj.textLines,'bus_voltage');
            obj.isRead(statusId) = true;
            
            if any(statusId)
                statusLines = obj.textLines(statusId)';
                
                % extract date string
                C = cellfun(@(x)regexp(x,'.*(?= [NfuUdp)','match'),statusLines);
                % convert to date number
                obj.heartbeatMsg.timeStamp = datetime(C,'InputFormat','yyyy-MM-dd HH:mm:ss,SSS');
                
                % add date stats
                obj.firstDatetime = min(obj.heartbeatMsg.timeStamp);
                obj.lastDatetime = max(obj.heartbeatMsg.timeStamp);
                obj.elapsedTime = duration(obj.lastDatetime - obj.firstDatetime);
                
                % search after "bus_voltage': " for digits.digits
                C = cellfun(@(x)regexp(x,'(?<=bus_voltage'':\s)\d+.\d+','match'),statusLines);
                obj.heartbeatMsg.busVoltage = str2double(C);
                assert(~any(isnan(obj.heartbeatMsg.busVoltage)),'Error parsing bus_voltage, check regexp')
                
                % add voltage stats
                obj.maxVoltage = max(obj.heartbeatMsg.busVoltage);
                obj.minVoltage = min(obj.heartbeatMsg.busVoltage);
                
                % lc_software_state': '        ', 'nfu_ms_per_CMDDOM
                C = cellfun(@(x)regexp(x,'(?<=lc_software_state'':\s'')\w+','match'),statusLines);
                obj.heartbeatMsg.lc_software_states = unique(C);
                obj.heartbeatMsg.lc_software_state = C;
                
                C = cellfun(@(x)regexp(x,'(?<=nfu_ms_per_CMDDOM'':\s)\d+.\d+','match'),statusLines);
                obj.heartbeatMsg.nfu_ms_per_CMDDOM = str2double(C);
                
                C = cellfun(@(x)regexp(x,'(?<=nfu_state'':\s'')\w+','match'),statusLines);
                obj.heartbeatMsg.nfu_state = unique(C);
                
                C = cellfun(@(x)regexp(x,'(?<=nfu_ms_per_ACTUATEMPL'':\s)-?\d+.\d+','match'),statusLines);
                obj.heartbeatMsg.nfu_ms_per_ACTUATEMPL = str2double(C);
                
                % ignore messages:
                obj.isRead(contains(obj.textLines,'shutdown_voltage')) = true;
            end
            
            %% Print Remaining Lines
            obj.unreadLines = obj.textLines(~obj.isRead)';
            
            
        end
        function get_time_epochs(obj)
            %%
            % Use heartbeats as basis for time epochs
            % Use 50Hz percepts as this will be more clear for time changes
            
            time_msg = obj.heartbeatMsg.timeStamp;
            time_msg = obj.jointCmdMsg.time;
            
            dt = years(diff(time_msg));
            
            % if year changes, this is a date shift
            s = find(abs(dt) > 1)';
            fprintf('%d date shifts detected:\n', length(s))
            
            for iDateShift = 1:length(s)
                time_msg(s(iDateShift):s(iDateShift)+1)
            end
            
            time_idx = [1 s length(time_msg)];
%             close all
            
            file_duration = 0;
            % within each file, there may be multiple restarts
            for iEpoch = 1:length(time_idx)-1
                tEpoch = time_msg(time_idx(iEpoch)+1:time_idx(iEpoch+1)-1);
                dt_epoch = diff(tEpoch);
                e_total = sum(abs(dt_epoch));
                dt_epoch(seconds(dt_epoch) > 100) = 0;
                dt_epoch(seconds(dt_epoch) < -100) = 0;
                e_actual = sum(dt_epoch);

                str = sprintf('Time Epoch %d of %d, total duration = %.1f hrs, actual duration %.1f hrs\n',...
                    iEpoch, length(time_idx)-1, hours(e_total), hours(e_actual));
                fprintf(str);
                
                file_duration = file_duration + e_actual;
                figure
                plot(tEpoch)
                title({[obj.filePath filesep obj.fileName] str},'Interpreter','None')
                
            end
            
            obj.elapsedTime = file_duration;
            
            
        end
    end
end

